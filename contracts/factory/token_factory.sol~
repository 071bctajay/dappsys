import 'auth/basic_authority.sol';
import 'data/balance_db.sol';
import 'factory/factory.sol';
import 'token/controller.sol';
import 'token/deployer.sol';

contract DSTokenFactory {
    DSDataFactory _data;
    DSAuthFactory _auth;
    function DSTokenFactory( DSAuthFactory auth, DSDataFactory data ) {
        _data = data;
        _auth = auth;
    }
    function buildDSTokenController( DSBalanceDB bal_db, DSApprovalDB appr_db )
             returns (DSTokenController)
    {
        var c = new DSTokenController( bal_db, appr_db );
        c.updateAuthority(msg.sender, false);
        return c;
    }
    function buildDSTokenFrontend( DSTokenController cont ) returns (DSTokenFrontend) {
        var c = new DSTokenFrontend( cont );
        c.updateAuthority(msg.sender, false);
        return c;
    }
    function buildDSTokenBase( uint initial_balance ) {
        var c = new DSTokenBase(initial_balance);
        c.transfer(msg.sender, initial_balance);
        c.updateAuthority(msg.sender, false);
    }
    function buildDSTokenBasicSystem( DSBasicAuthority authority ) {
        if( authority == address(0x0) ) {
            authority = _factory.buildDSBasicAuthority();
        } else {
            if(  authority._authority() != address(this) || authority._auth_mode() != false )
            {
                throw;
            }
        }

        var balance_db = _data.buildDSBalanceDB();
        var approval_db = _data.buildDSApprovalDB();
        // note, must be external calls:
        var controller = this.buildDSTokenController( balance_db, approval_db );
        var frontend = this.buildDSTokenFrontend( controller );



    }
}
